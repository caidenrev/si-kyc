/**
 * @fileoverview Firestore Security Rules for the KYC and Transaction Management App.
 *
 * Core Philosophy:
 * This ruleset implements a security model based on collection-level access control.  It enforces restrictions on who can read and write data to the `customers` and `transactions` collections.
 *
 * Data Structure:
 * The Firestore database contains two top-level collections:
 *   - /customers/{customerId}: Stores customer KYC data, with each document ID representing the customer's unique ID.
 *   - /transactions/{transactionId}: Stores transaction data, with each document ID representing the transaction's unique ID.
 *
 * Key Security Decisions:
 *   - No user-specific subcollections are used. All data is stored in top-level collections.
 *   - Listing of `customers` collection is forbidden.
 *   - Listing of `transactions` collection is not restricted in this prototype.
 *
 * Denormalization for Authorization:
 *   - Not used in this version.
 *
 * Structural Segregation:
 *   - Not used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer data.
     * @path /databases/{database}/documents/customers/{customerId}
     * @allow (get) Authenticated user can read a specific customer document.
     * @deny (list) Listing all customers is forbidden.
     * @deny (create) Customers cannot be created directly (likely created via backend).
     * @allow (update) Authenticated user can update their own customer document.
     * @allow (delete) Authenticated user can delete their own customer document.
     * @principle Enforces document ownership for writes, restricts listing.
     */
    match /customers/{customerId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's UID matches the customerId.
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(customerId) {
          return isOwner(customerId) && resource != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;

      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to transaction data.
     * @path /databases/{database}/documents/transactions/{transactionId}
     * @allow (get) Authenticated user can read a specific transaction document.
     * @allow (list) Authenticated user can list all transaction documents.
     * @deny (create) Authenticated user cannot create a transaction if not signed in.
     * @allow (update) Authenticated user can update a transaction document.
     * @allow (delete) Authenticated user can delete a transaction document.
     * @principle Requires authentication for creating transactions, enforces document ownership for writes.
     */
    match /transactions/{transactionId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if true;

      allow create: if isSignedIn();

      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}