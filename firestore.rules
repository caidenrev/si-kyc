/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a flat, collection-based security model. Customers and Transactions are stored in their respective
 * top-level collections.  Access is currently unrestricted; however, these rules provide the foundation for implementing
 * fine-grained access control in the future (e.g., owner-only or role-based access).
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer KYC data.
 * - /transactions/{transactionId}: Stores transaction data.
 *
 * Key Security Decisions:
 * - Listing of customers is currently allowed. This should be reviewed and potentially restricted in a production environment.
 * - Listing of transactions is currently allowed. This should be reviewed and potentially restricted in a production environment.
 * - No data validation is enforced beyond basic type checking. Data validation rules must be added to prevent malicious or malformed data.
 *
 * Denormalization for Authorization:
 * Not currently used, but consider denormalizing authorization data into documents to avoid costly `get()` operations in the future if
 * collaborative features are added (e.g., a list of authorized users on a customer document).
 *
 * Structural Segregation:
 * Not currently used, but consider using separate collections for private and public customer data in the future if needed (e.g.,
 * /customers/{customerId}/private and /publicCustomers/{customerId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to the customers collection.
     * @path /databases/{database}/documents/customers/{customerId}
     * @allow (get, list): Any signed-in user can read the customer data.
     * @allow (create, update, delete): Any signed-in user can create, update, or delete customer data.
     * @deny (create, update, delete): Not applicable, currently any signed in user can perform all operations.
     * @principle Currently allows any signed-in user to read and write customer data. In the future, implement access control by customer id.
     */
    match /customers/{customerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to the transactions collection.
     * @path /databases/{database}/documents/transactions/{transactionId}
     * @allow (get, list): Any signed-in user can read transaction data.
     * @allow (create, update, delete): Any signed-in user can create, update, or delete transaction data.
     * @deny (create, update, delete): Not applicable, currently any signed in user can perform all operations.
     * @principle Currently allows any signed-in user to read and write transaction data. In the future, implement access control by customer id.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}